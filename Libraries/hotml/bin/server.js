// Generated by Haxe 4.0.3
(function ($hx_exports, $global) { "use strict";
$hx_exports["hotml"] = $hx_exports["hotml"] || {};
$hx_exports["hotml"]["server"] = $hx_exports["hotml"]["server"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
function $extend(from, fields) {
	var proto = Object.create(from);
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
Math.__name__ = true;
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return s.lastIndexOf(start,0) == 0;
	} else {
		return false;
	}
};
StringTools.endsWith = function(s,end) {
	var elen = end.length;
	var slen = s.length;
	if(slen >= elen) {
		return s.indexOf(end,slen - elen) == slen - elen;
	} else {
		return false;
	}
};
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.ofString = function(s,encoding) {
	if(encoding == haxe_io_Encoding.RawNative) {
		var buf = new Uint8Array(s.length << 1);
		var _g = 0;
		var _g1 = s.length;
		while(_g < _g1) {
			var i = _g++;
			var c = s.charCodeAt(i);
			buf[i << 1] = c & 255;
			buf[i << 1 | 1] = c >> 8;
		}
		return new haxe_io_Bytes(buf.buffer);
	}
	var a = [];
	var i1 = 0;
	while(i1 < s.length) {
		var c1 = s.charCodeAt(i1++);
		if(55296 <= c1 && c1 <= 56319) {
			c1 = c1 - 55232 << 10 | s.charCodeAt(i1++) & 1023;
		}
		if(c1 <= 127) {
			a.push(c1);
		} else if(c1 <= 2047) {
			a.push(192 | c1 >> 6);
			a.push(128 | c1 & 63);
		} else if(c1 <= 65535) {
			a.push(224 | c1 >> 12);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		} else {
			a.push(240 | c1 >> 18);
			a.push(128 | c1 >> 12 & 63);
			a.push(128 | c1 >> 6 & 63);
			a.push(128 | c1 & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.prototype = {
	getString: function(pos,len,encoding) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(encoding == null) {
			encoding = haxe_io_Encoding.UTF8;
		}
		var s = "";
		var b = this.b;
		var i = pos;
		var max = pos + len;
		switch(encoding._hx_index) {
		case 0:
			while(i < max) {
				var c = b[i++];
				if(c < 128) {
					if(c == 0) {
						break;
					}
					s += String.fromCodePoint(c);
				} else if(c < 224) {
					var code = (c & 63) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code);
				} else if(c < 240) {
					var code1 = (c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(code1);
				} else {
					var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
					s += String.fromCodePoint(u);
				}
			}
			break;
		case 1:
			while(i < max) {
				var c1 = b[i++] | b[i++] << 8;
				s += String.fromCodePoint(c1);
			}
			break;
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
};
var haxe_io_Encoding = $hxEnums["haxe.io.Encoding"] = { __ename__ : true, __constructs__ : ["UTF8","RawNative"]
	,UTF8: {_hx_index:0,__enum__:"haxe.io.Encoding",toString:$estr}
	,RawNative: {_hx_index:1,__enum__:"haxe.io.Encoding",toString:$estr}
};
var haxe_crypto_Base64 = function() { };
haxe_crypto_Base64.__name__ = true;
haxe_crypto_Base64.encode = function(bytes,complement) {
	if(complement == null) {
		complement = true;
	}
	var str = new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).encodeBytes(bytes).toString();
	if(complement) {
		switch(bytes.length % 3) {
		case 1:
			str += "==";
			break;
		case 2:
			str += "=";
			break;
		default:
		}
	}
	return str;
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
haxe_crypto_BaseCode.__name__ = true;
haxe_crypto_BaseCode.prototype = {
	encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0 ? 0 : 1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask];
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask];
		}
		return out;
	}
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
haxe_ds__$StringMap_StringMapIterator.__name__ = true;
haxe_ds__$StringMap_StringMapIterator.prototype = {
	hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
};
var haxe_io_Error = $hxEnums["haxe.io.Error"] = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"]
	,Blocked: {_hx_index:0,__enum__:"haxe.io.Error",toString:$estr}
	,Overflow: {_hx_index:1,__enum__:"haxe.io.Error",toString:$estr}
	,OutsideBounds: {_hx_index:2,__enum__:"haxe.io.Error",toString:$estr}
	,Custom: ($_=function(e) { return {_hx_index:3,e:e,__enum__:"haxe.io.Error",toString:$estr}; },$_.__params__ = ["e"],$_)
};
var hotml_server_Main = $hx_exports["hotml"]["server"]["Main"] = function(buildDir,scriptName,port) {
	if(port == null) {
		port = 3220;
	}
	this.clients = [];
	this.buildDir = buildDir;
	this.scriptName = scriptName;
	this.wss = new js_npm_ws_Server({ port : port});
	var exit = function() {
		process.exit();
	};
	process.on("exit",exit);
	process.on("SIGINT",exit);
	this.wss.on("connection",$bind(this,this.onConnect));
};
hotml_server_Main.__name__ = true;
hotml_server_Main.prototype = {
	onConnect: function(ws) {
		var _gthis = this;
		console.log("Sources/hotml/server/Main.hx:39:","Client connected");
		this.clients.push(ws);
		var tmp = JSON.stringify({ type : "connect", id : 0, clients : [], diff : ""});
		ws.send(tmp,null);
		ws.on("message",function(data) {
		});
		ws.on("close",function(err) {
			console.log("Sources/hotml/server/Main.hx:54:","Client disconnected");
			HxOverrides.remove(_gthis.clients,ws);
		});
	}
	,broadcast: function(data) {
		var _g = 0;
		var _g1 = this.clients;
		while(_g < _g1.length) _g1[_g++].send(JSON.stringify(data),null);
	}
	,reload: function() {
		var data = js_node_Fs.readFileSync("" + this.buildDir + "/" + this.scriptName,{ encoding : "utf8"});
		if(this.file == null) {
			this.file = new hotml_server_Parser(data);
			console.log("Sources/hotml/server/Main.hx:73:","" + this.buildDir + "/" + this.scriptName + " cached");
			console.log("Sources/hotml/server/Main.hx:74:","Js type: " + this.file.getJsType());
			return;
		}
		var newFile = new hotml_server_Parser(data);
		var arr = this.file.makeDiffTo(newFile);
		if(hotml_server_Main.logResult) {
			console.log("Sources/hotml/server/Main.hx:79:",arr);
		}
		this.broadcast(arr);
		this.file = newFile;
	}
	,reloadAsset: function(path) {
		this.broadcast([{ type : "reloadAsset", path : path, data : haxe_crypto_Base64.encode(js_node_buffer__$Buffer_Helper.bytesOfBuffer(js_node_Fs.readFileSync("" + this.buildDir + "/" + path)))}]);
	}
};
var hotml_server_Parser = function(file) {
	this.jsTypeDetected = false;
	this.jsType = 0;
	this.num = 0;
	this.mode = 0;
	this.matchEnum = new EReg("var ([^ []+) = \\$hxEnums\\[\"([^\"]+)","");
	this.matchFunc = new EReg("([^ ,\t]+): function\\((.*)\\)","");
	this.matchStaticFunc = new EReg("^([^ ]+)\\.([^ ]+) = function\\((.*)\\)","");
	this.matchStaticArr = new EReg("^([^ ]+)\\.([^ ]+) = \\(function\\(\\$this\\)","");
	this.matchStaticVar = new EReg("^([^[ .]+)\\.([^ .]+) = (.+);","");
	this.matchInterfaces = new EReg("__interfaces__ = (.+);","");
	this.matchParent = new EReg("__super__ = (.+);","");
	this.matchClassNameId = new EReg("\\$hxClasses\\[\"(.+)\"] = (.+);","");
	this.matchClassicObj = new EReg("^var ([^ ]+) = \\$hxClasses\\[\"([^ ]+)\"\\] =.*{ ?};$","");
	this.matchObj = new EReg("var ([^ ]+) =.*{ ?}","");
	this.matchClassicConstructor = new EReg("^var ([^ ]+) = \\$hxClasses\\[\"([^ ]+)\"\\] =.* function\\((.*)\\) {( };)?$","");
	this.matchConstructor = new EReg("^var ([^ ]+) =.* function\\((.*)\\) {( };)?$","");
	this.matchExportsObj = new EReg("var \\$hx_exports =","");
	this.matchClosure = new EReg("\\(function \\(.*\"use strict\";","");
	this.enums = new haxe_ds_StringMap();
	this.classes = new haxe_ds_StringMap();
	this.lines = file.split("\n");
	this.num = 0;
	while(this.num < this.lines.length) {
		var line = this.lines[this.num];
		switch(this.mode) {
		case 0:
			this.parseRegular(line);
			break;
		case 1:
			this.parseMethods(line);
			break;
		}
		this.num++;
	}
};
hotml_server_Parser.__name__ = true;
hotml_server_Parser.prototype = {
	getJsType: function() {
		var s;
		switch(this.jsType) {
		case 0:
			s = "Classic";
			break;
		case 1:
			s = "Es5";
			break;
		}
		return s + (!this.jsTypeDetected ? " (Undetected)" : "");
	}
	,parseRegular: function(line) {
		if(!this.jsTypeDetected && this.matchClosure.match(line)) {
			this.jsTypeDetected = true;
			this.jsType = 1;
			return;
		}
		if(!this.jsTypeDetected && this.matchExportsObj.match(line)) {
			this.jsTypeDetected = true;
			this.jsType = 0;
			return;
		}
		if(this.jsType == 1 && this.matchConstructor.match(line)) {
			this.setConstructor(this.matchConstructor.matched(1),this.matchConstructor.matched(2).split(","));
			return;
		}
		if(this.jsType == 0 && this.matchClassicConstructor.match(line)) {
			var name = this.matchClassicConstructor.matched(1);
			var nameId = this.matchClassicConstructor.matched(2);
			this.setConstructor(name,this.matchClassicConstructor.matched(3).split(","));
			this.setNameId(name,nameId);
			return;
		}
		if(this.matchParent.match(line)) {
			var parent = this.matchParent.matched(1);
			var _this = this.classes;
			if((__map_reserved[parent] != null ? _this.getReserved(parent) : _this.h[parent]) == null) {
				if(hotml_server_Parser.logSkips) {
					console.log("Sources/hotml/server/Parser.hx:93:","Skip " + this.currentClass.name + " parent " + parent);
				}
				return;
			}
			var _this1 = this.classes;
			this.currentClass.parent = (__map_reserved[parent] != null ? _this1.getReserved(parent) : _this1.h[parent]).nameId;
			return;
		}
		if(this.matchInterfaces.match(line)) {
			this.currentClass.interfaces = this.matchInterfaces.matched(1);
			return;
		}
		if(StringTools.endsWith(line,".prototype = {") || line.indexOf(".prototype = $extend(") != -1) {
			if(hotml_server_Parser.logTypes) {
				console.log("Sources/hotml/server/Parser.hx:85:","" + this.currentClass.name + " {");
			}
			this.mode = 1;
			return;
		}
		if(this.jsType == 1 && this.matchObj.match(line)) {
			this.setObj(this.matchObj.matched(1));
			return;
		}
		if(this.jsType == 0 && this.matchClassicObj.match(line)) {
			var name1 = this.matchClassicObj.matched(1);
			var nameId1 = this.matchClassicObj.matched(2);
			this.setObj(name1);
			this.setNameId(name1,nameId1);
			return;
		}
		if(this.matchClassNameId.match(line)) {
			var nameId2 = this.matchClassNameId.matched(1);
			this.setNameId(this.matchClassNameId.matched(2),nameId2);
			return;
		}
		if(this.matchStaticVar.match(line)) {
			var className = this.matchStaticVar.matched(1);
			var field = this.matchStaticVar.matched(2);
			var value = this.matchStaticVar.matched(3);
			if(field == "__name__") {
				return;
			}
			if(StringTools.startsWith(value,"function")) {
				throw new js__$Boot_HaxeError("TODO one-line function");
			}
			if(hotml_server_Parser.logTypes) {
				console.log("Sources/hotml/server/Parser.hx:85:","" + className + "." + field + " = " + this.minString(value));
			}
			var _this2 = this.classes;
			var _this3 = (__map_reserved[className] != null ? _this2.getReserved(className) : _this2.h[className]).staticVars;
			if(__map_reserved[field] != null) {
				_this3.setReserved(field,value);
			} else {
				_this3.h[field] = value;
			}
			return;
		}
		if(this.matchStaticArr.match(line)) {
			var className1 = this.matchStaticArr.matched(1);
			var field1 = this.matchStaticArr.matched(2);
			var value1 = this.readFunctionBody("}(this));");
			if(hotml_server_Parser.logTypes) {
				console.log("Sources/hotml/server/Parser.hx:85:","" + className1 + "." + field1 + " = " + value1);
			}
			var _this4 = this.classes;
			var _this5 = (__map_reserved[className1] != null ? _this4.getReserved(className1) : _this4.h[className1]).staticVars;
			if(__map_reserved[field1] != null) {
				_this5.setReserved(field1,value1);
			} else {
				_this5.h[field1] = value1;
			}
			return;
		}
		if(this.matchStaticFunc.match(line)) {
			var className2 = this.matchStaticFunc.matched(1);
			var name2 = this.matchStaticFunc.matched(2);
			var args = this.matchStaticFunc.matched(3);
			var body = this.readFunctionBody();
			if(className2 == "window") {
				return;
			}
			if(hotml_server_Parser.logTypes) {
				console.log("Sources/hotml/server/Parser.hx:85:","" + className2 + "." + name2 + "(" + args + ") {" + body.split("\n").length + "}");
			}
			if(hotml_server_Parser.logBodies) {
				console.log("Sources/hotml/server/Parser.hx:89:",body);
			}
			var _this6 = this.classes;
			var v = { name : name2, args : args.split(","), body : body, isStatic : true};
			var _this7 = (__map_reserved[className2] != null ? _this6.getReserved(className2) : _this6.h[className2]).methods;
			if(__map_reserved[name2] != null) {
				_this7.setReserved(name2,v);
			} else {
				_this7.h[name2] = v;
			}
			return;
		}
		if(this.matchEnum.match(line)) {
			var name3 = this.matchEnum.matched(1);
			var v1 = { name : name3, nameId : this.matchEnum.matched(2), body : this.readFunctionBody()};
			var _this8 = this.enums;
			if(__map_reserved[name3] != null) {
				_this8.setReserved(name3,v1);
			} else {
				_this8.h[name3] = v1;
			}
			return;
		}
	}
	,setConstructor: function(name,args) {
		var constructor = { name : "new", args : args, body : this.readFunctionBody()};
		var _g = new haxe_ds_StringMap();
		if(__map_reserved["new"] != null) {
			_g.setReserved("new",constructor);
		} else {
			_g.h["new"] = constructor;
		}
		var klass = { name : name, methods : _g, staticVars : new haxe_ds_StringMap()};
		if(hotml_server_Parser.logTypes) {
			console.log("Sources/hotml/server/Parser.hx:85:","" + name + "(" + Std.string(args) + ").new {" + constructor.body.split("\n").length + "}");
		}
		if(hotml_server_Parser.logBodies) {
			console.log("Sources/hotml/server/Parser.hx:89:",constructor.body);
		}
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,klass);
		} else {
			_this.h[name] = klass;
		}
		this.currentClass = klass;
	}
	,setObj: function(name) {
		var klass = { name : name, methods : new haxe_ds_StringMap(), staticVars : new haxe_ds_StringMap()};
		if(hotml_server_Parser.logTypes) {
			console.log("Sources/hotml/server/Parser.hx:85:","Class " + name + " {}");
		}
		var _this = this.classes;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,klass);
		} else {
			_this.h[name] = klass;
		}
	}
	,setNameId: function(name,nameId) {
		var _this = this.classes;
		if((__map_reserved[name] != null ? _this.getReserved(name) : _this.h[name]) == null) {
			if(hotml_server_Parser.logSkips) {
				console.log("Sources/hotml/server/Parser.hx:93:","Skip " + name + " id " + nameId);
			}
			return;
		}
		var _this1 = this.classes;
		(__map_reserved[name] != null ? _this1.getReserved(name) : _this1.h[name]).nameId = nameId;
	}
	,readFunctionBody: function(lastLine) {
		if(lastLine == null) {
			lastLine = "};";
		}
		var body_b = "";
		var isOpened = false;
		var level = 0;
		while(this.num < this.lines.length) {
			var line = this.lines[this.num];
			var lineStart = 0;
			var lineEnd = line.length;
			var _g = 0;
			var _g1 = line.length;
			while(_g < _g1) {
				var i = _g++;
				var code = line.charCodeAt(i);
				if(code == 123) {
					if(level == 0) {
						lineStart = i + 1;
						isOpened = true;
					}
					++level;
				} else if(code == 125) {
					--level;
					if(isOpened && level == 0) {
						lineEnd = i - 1;
						break;
					}
				}
			}
			if(body_b.length > 0 && lineStart == 0 && lineEnd == line.length) {
				body_b += "\n";
			}
			body_b += Std.string(line.substring(lineStart,lineEnd));
			if(isOpened && level == 0) {
				break;
			}
			this.num++;
		}
		return body_b;
	}
	,parseMethods: function(line) {
		if(this.matchFunc.match(line)) {
			var name = this.matchFunc.matched(1);
			var args = this.matchFunc.matched(2);
			var body = this.readFunctionBody("\t}");
			if(hotml_server_Parser.logTypes) {
				console.log("Sources/hotml/server/Parser.hx:85:","function " + name + "(" + args + ") {" + body.split("\n").length + "}");
			}
			if(hotml_server_Parser.logBodies) {
				console.log("Sources/hotml/server/Parser.hx:89:",body);
			}
			var v = { name : name, args : args.split(","), body : body};
			var _this = this.currentClass.methods;
			if(__map_reserved[name] != null) {
				_this.setReserved(name,v);
			} else {
				_this.h[name] = v;
			}
			return;
		}
		if(line == "};" || line == "});") {
			if(hotml_server_Parser.logTypes) {
				console.log("Sources/hotml/server/Parser.hx:85:","} (" + this.currentClass.name + ")");
			}
			this.mode = 0;
		}
	}
	,makeDiffTo: function(file) {
		var result = [];
		var _this = file.classes;
		var klass = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
		while(klass.hasNext()) this.compareClass(klass.next(),result);
		var _this1 = file.enums;
		var en = new haxe_ds__$StringMap_StringMapIterator(_this1,_this1.arrayKeys());
		while(en.hasNext()) this.compareEnum(en.next(),result);
		return result;
	}
	,compareClass: function(klass,result) {
		var className = klass.nameId;
		var key = klass.name;
		var _this = this.classes;
		var old = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(old == null) {
			console.log("Sources/hotml/server/Parser.hx:302:","New class: " + className);
			result.push({ type : "addClass", klass : klass});
			return;
		}
		if(old.parent != klass.parent) {
			console.log("Sources/hotml/server/Parser.hx:307:","" + className + ": new parent: " + klass.parent);
			result.push({ type : "addClass", klass : klass});
			return;
		}
		var keys = this.mergeKeys(old.staticVars,klass.staticVars);
		var _g = 0;
		while(_g < keys.length) {
			var key1 = keys[_g];
			++_g;
			var _this1 = old.staticVars;
			var _this2 = klass.staticVars;
			var newValue = __map_reserved[key1] != null ? _this2.getReserved(key1) : _this2.h[key1];
			if((__map_reserved[key1] != null ? _this1.getReserved(key1) : _this1.h[key1]) != newValue) {
				console.log("Sources/hotml/server/Parser.hx:316:","" + className + ": static var " + key1 + " value: " + this.minString(newValue));
				result.push({ type : "staticVar", className : className, name : key1, value : newValue});
			}
		}
		var keys1 = this.mergeKeys(old.methods,klass.methods);
		var _g1 = 0;
		while(_g1 < keys1.length) {
			var key2 = keys1[_g1];
			++_g1;
			var _this3 = old.methods;
			var value = __map_reserved[key2] != null ? _this3.getReserved(key2) : _this3.h[key2];
			var _this4 = klass.methods;
			var newValue1 = __map_reserved[key2] != null ? _this4.getReserved(key2) : _this4.h[key2];
			if("" + Std.string(value) != "" + Std.string(newValue1)) {
				console.log("Sources/hotml/server/Parser.hx:325:","" + className + ": func " + key2 + "() value: " + this.minString("" + Std.string(newValue1)));
				if(newValue1 == null) {
					newValue1 = { name : value.name, args : [], body : "", isStatic : value.isStatic};
				}
				if(newValue1.name == "new") {
					result.push({ type : "constructor", classId : klass.name, className : className, func : newValue1});
				} else {
					result.push({ type : "func", className : className, func : newValue1});
				}
			}
		}
	}
	,compareEnum: function(en,result) {
		var key = en.name;
		var _this = this.enums;
		var old = __map_reserved[key] != null ? _this.getReserved(key) : _this.h[key];
		if(old == null) {
			console.log("Sources/hotml/server/Parser.hx:342:","New enum: " + en.nameId);
			result.push({ type : "addEnum", enumeration : en});
			return;
		}
		if(old.body != en.body) {
			console.log("Sources/hotml/server/Parser.hx:347:","New enum body: " + this.minString(en.body));
			result.push({ type : "addEnum", enumeration : en});
			return;
		}
	}
	,mergeKeys: function(map,map2) {
		var result = [];
		var key = map.keys();
		while(key.hasNext()) result.push(key.next());
		var key1 = map2.keys();
		while(key1.hasNext()) {
			var key2 = key1.next();
			if(result.indexOf(key2) == -1) {
				result.push(key2);
			}
		}
		return result;
	}
	,minString: function(s) {
		if(s == null) {
			return "null";
		}
		if(s.length < 23) {
			return s;
		}
		return HxOverrides.substr(s,0,10) + "..." + HxOverrides.substr(s,s.length - 10,10);
	}
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o.__enum__) {
			var e = $hxEnums[o.__enum__];
			var n = e.__constructs__[o._hx_index];
			var con = e[n];
			if(con.__params__) {
				s = s + "\t";
				return n + "(" + ((function($this) {
					var $r;
					var _g = [];
					{
						var _g1 = 0;
						var _g2 = con.__params__;
						while(true) {
							if(!(_g1 < _g2.length)) {
								break;
							}
							var p = _g2[_g1];
							_g1 = _g1 + 1;
							_g.push(js_Boot.__string_rec(o[p],s));
						}
					}
					$r = _g;
					return $r;
				}(this))).join(",") + ")";
			} else {
				return n;
			}
		}
		if(((o) instanceof Array)) {
			var str = "[";
			s += "\t";
			var _g3 = 0;
			var _g11 = o.length;
			while(_g3 < _g11) {
				var i = _g3++;
				str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
			}
			str += "]";
			return str;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e1 ) {
			var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var str1 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		var k = null;
		for( k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str1.length != 2) {
			str1 += ", \n";
		}
		str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str1 += "\n" + s + "}";
		return str1;
	case "string":
		return o;
	default:
		return String(o);
	}
};
var js_node_Fs = require("fs");
var js_node_buffer__$Buffer_Helper = function() { };
js_node_buffer__$Buffer_Helper.__name__ = true;
js_node_buffer__$Buffer_Helper.bytesOfBuffer = function(b) {
	var o = Object.create(haxe_io_Bytes.prototype);
	o.length = b.byteLength;
	o.b = b;
	b.bufferValue = b;
	b.hxBytes = o;
	b.bytes = b;
	return o;
};
var js_npm_ws_Server = require("ws").Server;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if( String.fromCodePoint == null ) String.fromCodePoint = function(c) { return c < 0x10000 ? String.fromCharCode(c) : String.fromCharCode((c>>10)+0xD7C0)+String.fromCharCode((c&0x3FF)+0xDC00); }
String.__name__ = true;
Array.__name__ = true;
var __map_reserved = {};
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
hotml_server_Main.logResult = false;
hotml_server_Parser.logTypes = false;
hotml_server_Parser.logBodies = false;
hotml_server_Parser.logSkips = false;
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
